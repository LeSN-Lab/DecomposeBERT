from utils.dataset_utils.load_dataset import load_data
from utils.model_utils.load_model import load_model
from utils.model_utils.model_config import ModelConfig
import torch
from tqdm import tqdm
import numpy as np

model_name = "fabriceyhc/bert-base-uncased-yahoo_answers_topics"
task_type = "classification"
architectures = "bert"
dataset_name = "Yahoo"
num_labels = 10

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

checkpoint = None
model_config = ModelConfig(
    model_name=model_name,
    task_type=task_type,
    dataset_name=dataset_name,
    checkpoint=checkpoint,
    device=device,
)


train_dataloader, valid_dataloader, test_dataloader = load_data(
    model_config, batch_size=32
)

should_be_removed_head_class_1 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1),
                                  (6, 11), (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (9, 1), (9, 10), (0, 7), (2, 4),
                                  (1, 8), (6, 4), (7, 3), (3, 8), (5, 5), (8, 4), (9, 3), (0, 0), (11, 9), (1, 10),
                                  (6, 6), (3, 1), (3, 10), (5, 7), (0, 2), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0),
                                  (5, 9), (4, 11), (9, 7), (10, 8), (1, 5), (6, 1), (7, 9), (3, 5), (5, 2), (9, 0),
                                  (5, 11), (9, 9), (10, 1), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4),
                                  (4, 6), (9, 2), (8, 6), (10, 3), (1, 0), (1, 9), (0, 11), (2, 8), (7, 4), (3, 9),
                                  (5, 6), (4, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (6, 10), (3, 2), (4, 1),
                                  (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3), (3, 4), (4, 3),
                                  (8, 3), (10, 0), (10, 9), (1, 6), (0, 8), (2, 5), (9, 11), (6, 5), (4, 5), (8, 5),
                                  (10, 2), (9, 4), (0, 1), (11, 1), (0, 10), (2, 7), (11, 10), (7, 6), (4, 7), (5, 8),
                                  (8, 7), (1, 1), (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9)]
should_be_removed_head_class_2 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1),
                                  (6, 11), (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (8, 11), (9, 10), (2, 4), (11, 7),
                                  (1, 8), (6, 4), (7, 3), (5, 5), (8, 4), (9, 3), (0, 0), (1, 10), (6, 6), (3, 1),
                                  (3, 10), (5, 7), (0, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11), (9, 7),
                                  (1, 5), (6, 1), (7, 0), (7, 9), (5, 2), (4, 4), (9, 0), (5, 11), (9, 9), (10, 1),
                                  (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4), (4, 6), (9, 2), (8, 6),
                                  (1, 0), (0, 11), (2, 8), (7, 4), (3, 0), (3, 9), (5, 6), (4, 8), (8, 8), (10, 5),
                                  (1, 2), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10), (3, 2), (4, 1), (3, 11), (4, 10),
                                  (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3), (3, 4), (4, 3), (8, 3), (10, 0),
                                  (10, 9), (1, 6), (2, 5), (9, 11), (6, 5), (4, 5), (8, 5), (10, 2), (9, 4), (0, 1),
                                  (11, 1), (0, 10), (2, 7), (11, 10), (6, 7), (7, 6), (4, 7), (5, 8), (8, 7), (1, 1),
                                  (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_3 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (2, 11), (6, 2), (7, 1), (6, 11),
                                  (3, 6), (5, 3), (8, 2), (9, 1), (8, 11), (9, 10), (0, 7), (2, 4), (11, 7), (1, 8),
                                  (6, 4), (7, 3), (3, 8), (5, 5), (8, 4), (11, 9), (1, 10), (6, 6), (3, 1), (3, 10),
                                  (5, 7), (0, 2), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11), (10, 8),
                                  (1, 5), (6, 1), (7, 9), (3, 5), (5, 2), (4, 4), (5, 11), (9, 9), (10, 1), (10, 10),
                                  (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4), (4, 6), (9, 2), (8, 6), (10, 3),
                                  (1, 0), (1, 9), (0, 11), (2, 8), (7, 4), (6, 8), (3, 0), (3, 9), (5, 6), (4, 8),
                                  (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10), (3, 2), (4, 1),
                                  (3, 11), (4, 10), (8, 1), (1, 4), (0, 6), (2, 3), (6, 3), (4, 3), (8, 3), (10, 0),
                                  (10, 9), (1, 6), (0, 8), (2, 5), (9, 11), (11, 8), (6, 5), (8, 5), (9, 4), (0, 1),
                                  (11, 1), (0, 10), (2, 7), (11, 10), (6, 7), (7, 6), (4, 7), (5, 8), (8, 7), (1, 1),
                                  (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_4 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1),
                                  (6, 11), (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (9, 1), (8, 11), (9, 10), (0, 7),
                                  (2, 4), (11, 7), (1, 8), (6, 4), (7, 3), (3, 8), (5, 5), (8, 4), (9, 3), (0, 0),
                                  (0, 9), (1, 10), (6, 6), (3, 1), (3, 10), (5, 7), (0, 2), (11, 2), (1, 3), (7, 7),
                                  (3, 3), (5, 0), (5, 9), (4, 11), (10, 8), (1, 5), (6, 1), (7, 0), (7, 9), (3, 5),
                                  (5, 2), (4, 4), (9, 0), (5, 11), (9, 9), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11),
                                  (3, 7), (5, 4), (4, 6), (9, 2), (8, 6), (1, 0), (1, 9), (0, 11), (2, 8), (7, 4),
                                  (6, 8), (3, 9), (5, 6), (4, 8), (10, 5), (1, 2), (0, 4), (2, 10), (6, 10), (3, 2),
                                  (4, 1), (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3), (3, 4),
                                  (4, 3), (8, 3), (10, 9), (1, 6), (0, 8), (2, 5), (9, 11), (6, 5), (4, 5), (8, 5),
                                  (10, 2), (9, 4), (0, 1), (11, 1), (10, 11), (2, 7), (11, 10), (7, 6), (4, 7), (5, 8),
                                  (8, 7), (1, 1), (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_5 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1),
                                  (6, 11), (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (0, 7), (2, 4), (1, 8), (6, 4),
                                  (7, 3), (3, 8), (5, 5), (8, 4), (9, 3), (0, 0), (0, 9), (1, 10), (6, 6), (3, 1),
                                  (3, 10), (5, 7), (0, 2), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11),
                                  (9, 7), (10, 8), (1, 5), (6, 1), (7, 0), (7, 9), (3, 5), (5, 2), (4, 4), (9, 0),
                                  (5, 11), (9, 9), (10, 1), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4),
                                  (4, 6), (9, 2), (8, 6), (1, 0), (1, 9), (0, 11), (2, 8), (7, 4), (6, 8), (3, 9),
                                  (5, 6), (4, 8), (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10),
                                  (3, 2), (4, 1), (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3),
                                  (3, 4), (4, 3), (8, 3), (10, 9), (1, 6), (0, 8), (2, 5), (6, 5), (4, 5), (8, 5),
                                  (10, 2), (9, 4), (11, 1), (10, 11), (0, 10), (2, 7), (6, 7), (7, 6), (4, 7), (5, 8),
                                  (8, 7), (1, 1), (0, 3), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9)]
should_be_removed_head_class_6 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (6, 2), (7, 1), (6, 11),
                                  (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (8, 11), (9, 10), (0, 7), (2, 4), (11, 7),
                                  (1, 8), (6, 4), (7, 3), (5, 5), (8, 4), (9, 3), (0, 0), (0, 9), (11, 9), (1, 10),
                                  (6, 6), (3, 1), (3, 10), (5, 7), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9),
                                  (4, 11), (9, 7), (10, 8), (1, 5), (6, 1), (7, 0), (7, 9), (3, 5), (5, 2), (4, 4),
                                  (9, 0), (5, 11), (9, 9), (10, 1), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7),
                                  (5, 4), (4, 6), (9, 2), (8, 6), (10, 3), (1, 0), (1, 9), (0, 11), (2, 8), (7, 4),
                                  (3, 0), (3, 9), (5, 6), (4, 8), (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (2, 10),
                                  (6, 10), (3, 2), (4, 1), (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (0, 6), (2, 3),
                                  (6, 3), (3, 4), (4, 3), (8, 3), (10, 0), (10, 9), (1, 6), (0, 8), (2, 5), (11, 8),
                                  (6, 5), (4, 5), (8, 5), (10, 2), (9, 4), (10, 11), (11, 10), (6, 7), (7, 6), (4, 7),
                                  (8, 7), (1, 1), (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_7 = [(4, 9), (5, 1), (8, 0), (5, 10), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1), (6, 11),
                                  (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (9, 1), (9, 10), (0, 7), (2, 4), (1, 8),
                                  (6, 4), (7, 3), (5, 5), (8, 4), (9, 3), (0, 0), (0, 9), (11, 9), (1, 10), (6, 6),
                                  (3, 1), (3, 10), (0, 2), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11),
                                  (9, 7), (10, 8), (1, 5), (6, 1), (7, 9), (3, 5), (5, 2), (4, 4), (9, 0), (5, 11),
                                  (9, 9), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4), (4, 6), (9, 2),
                                  (8, 6), (10, 3), (1, 0), (1, 9), (2, 8), (7, 4), (3, 0), (3, 9), (5, 6), (4, 8),
                                  (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10), (3, 2), (4, 1),
                                  (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3), (3, 4), (4, 3),
                                  (8, 3), (10, 0), (10, 9), (1, 6), (0, 8), (2, 5), (11, 8), (6, 5), (4, 5), (8, 5),
                                  (10, 2), (9, 4), (0, 1), (11, 1), (10, 11), (0, 10), (2, 7), (6, 7), (7, 6), (4, 7),
                                  (5, 8), (1, 1), (0, 3), (9, 6), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_8 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (11, 5), (2, 11), (6, 2), (7, 1),
                                  (6, 11), (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (9, 1), (8, 11), (0, 7), (2, 4),
                                  (11, 7), (1, 8), (6, 4), (7, 3), (3, 8), (5, 5), (8, 4), (9, 3), (0, 0), (11, 9),
                                  (1, 10), (6, 6), (3, 1), (3, 10), (5, 7), (0, 2), (11, 2), (1, 3), (7, 7), (3, 3),
                                  (5, 0), (5, 9), (4, 11), (10, 8), (1, 5), (6, 1), (7, 0), (7, 9), (5, 2), (9, 0),
                                  (5, 11), (9, 9), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4), (4, 6),
                                  (9, 2), (8, 6), (10, 3), (1, 9), (0, 11), (2, 8), (7, 4), (6, 8), (3, 9), (5, 6),
                                  (4, 8), (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (6, 10), (3, 2), (4, 1),
                                  (3, 11), (4, 10), (8, 1), (8, 10), (1, 4), (2, 3), (6, 3), (3, 4), (8, 3), (10, 0),
                                  (10, 9), (1, 6), (0, 8), (2, 5), (9, 11), (11, 8), (6, 5), (4, 5), (8, 5), (9, 4),
                                  (0, 1), (11, 1), (10, 11), (2, 7), (11, 10), (6, 7), (7, 6), (4, 7), (5, 8), (8, 7),
                                  (1, 1), (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_9 = [(4, 9), (5, 1), (8, 0), (5, 10), (8, 9), (2, 2), (2, 11), (6, 2), (7, 1), (6, 11),
                                  (7, 10), (4, 2), (3, 6), (5, 3), (8, 2), (9, 1), (8, 11), (9, 10), (0, 7), (2, 4),
                                  (1, 8), (6, 4), (7, 3), (3, 8), (5, 5), (8, 4), (9, 3), (11, 9), (1, 10), (6, 6),
                                  (3, 1), (3, 10), (5, 7), (0, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11),
                                  (9, 7), (10, 8), (1, 5), (6, 1), (7, 0), (7, 9), (3, 5), (5, 2), (4, 4), (9, 0),
                                  (5, 11), (9, 9), (10, 1), (10, 10), (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4),
                                  (4, 6), (9, 2), (8, 6), (1, 0), (1, 9), (0, 11), (2, 8), (7, 4), (3, 0), (3, 9),
                                  (5, 6), (4, 8), (8, 8), (10, 5), (1, 2), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10),
                                  (3, 2), (4, 1), (3, 11), (4, 10), (8, 1), (1, 4), (2, 3), (6, 3), (3, 4), (8, 3),
                                  (10, 0), (10, 9), (1, 6), (2, 5), (9, 11), (11, 8), (6, 5), (4, 5), (8, 5), (10, 2),
                                  (9, 4), (0, 1), (11, 1), (10, 11), (0, 10), (11, 10), (6, 7), (7, 6), (4, 7), (5, 8),
                                  (8, 7), (1, 1), (0, 3), (2, 0), (9, 6), (6, 0), (6, 9), (7, 8)]
should_be_removed_head_class_10 = [(4, 9), (5, 1), (8, 0), (5, 10), (2, 2), (11, 5), (6, 2), (7, 1), (6, 11), (7, 10),
                                   (3, 6), (5, 3), (8, 2), (9, 10), (0, 7), (2, 4), (1, 8), (6, 4), (7, 3), (3, 8),
                                   (5, 5), (8, 4), (9, 3), (0, 0), (11, 9), (1, 10), (6, 6), (3, 1), (3, 10), (5, 7),
                                   (0, 2), (11, 2), (1, 3), (7, 7), (3, 3), (5, 0), (5, 9), (4, 11), (9, 7), (10, 8),
                                   (1, 5), (6, 1), (7, 9), (3, 5), (5, 2), (4, 4), (5, 11), (9, 9), (10, 1), (10, 10),
                                   (1, 7), (2, 6), (7, 2), (7, 11), (3, 7), (5, 4), (4, 6), (9, 2), (8, 6), (10, 3),
                                   (1, 0), (0, 11), (2, 8), (7, 4), (6, 8), (3, 0), (3, 9), (5, 6), (4, 8), (8, 8),
                                   (10, 5), (0, 4), (2, 1), (1, 11), (2, 10), (6, 10), (3, 2), (4, 1), (3, 11), (4, 10),
                                   (8, 1), (8, 10), (1, 4), (0, 6), (2, 3), (6, 3), (3, 4), (4, 3), (8, 3), (10, 0),
                                   (10, 9), (1, 6), (0, 8), (2, 5), (9, 11), (6, 5), (4, 5), (8, 5), (10, 2), (9, 4),
                                   (0, 1), (10, 11), (0, 10), (2, 7), (11, 10), (6, 7), (7, 6), (4, 7), (5, 8), (8, 7),
                                   (1, 1), (0, 3), (2, 0), (9, 6), (11, 3), (2, 9), (6, 0), (6, 9), (7, 8)]

should_be_removed_head = [should_be_removed_head_class_1, should_be_removed_head_class_2,
                          should_be_removed_head_class_3, should_be_removed_head_class_4,
                          should_be_removed_head_class_5, should_be_removed_head_class_6,
                          should_be_removed_head_class_7, should_be_removed_head_class_8,
                          should_be_removed_head_class_9, should_be_removed_head_class_10]


model_1, _, _ = load_model(model_config)
model_2, _, _ = load_model(model_config)
model_3, _, _ = load_model(model_config)
model_4, _, _ = load_model(model_config)
model_5, _, _ = load_model(model_config)
model_6, _, _ = load_model(model_config)
model_7, _, _ = load_model(model_config)
model_8, _, _ = load_model(model_config)
model_9, _, _ = load_model(model_config)
model_10, _, _ = load_model(model_config)

models = [model_1, model_2, model_3, model_4, model_5, model_6, model_7, model_8, model_9, model_10]

for i in range(10):  # pruning
    pruned_head_num = 0
    for layer_index, head_index in should_be_removed_head[i]:
        models[i].bert.encoder.layer[layer_index].attention.prune_heads([head_index])
        pruned_head_num += 1

    print('class ', i + 1, ' pruned_head_num: ', pruned_head_num, 'remaining head num: ', 12 * 12 - pruned_head_num)


def find_index_per_column(logits_matrix, true_table_matrix):
    # 결과를 저장할 리스트 초기화
    result_indices = []

    # 열(column) 별로 반복
    for column in range(logits_matrix.shape[1]):
        # 현재 열에 대한 logits와 true_table 추출
        logits = logits_matrix[:, column]
        true_table = true_table_matrix[:, column]

        true_indices = [i for i, value in enumerate(true_table) if value]
        # 3. 모두 다 False인 경우
        if not true_indices:
            result_indices.append(np.argmax(logits) + 1)
            continue

        # 1. True인 인덱스가 한 개만 존재할 경우
        if len(true_indices) == 1:
            result_indices.append(true_indices[0] + 1)
            continue

        # 2. True인 인덱스가 2개 이상 존재할 경우
        max_value = float('-inf')
        max_index = None
        for index in true_indices:
            if logits[index] > max_value:
                max_value = logits[index]
                max_index = index
        result_indices.append(max_index + 1)

    return result_indices


# ================================================================================================
# 모델 평가

correct_num = []
correct_num_neg = []
accs = [[], [], [], [], [], [], [], [], [], []]
preds = []
true_labels = []
preds_rp = [[], [], [], [], [], [], [], [], [], []]

for batch in tqdm(test_dataloader, desc="Evaluating"):
    inputs, _, labels = batch
    # inputs = {k: v.squeeze(1).to(device) for k, v in inputs.items()}
    labels = labels.to(device)

    with torch.no_grad():
        outputs_1 = model_1(inputs)
        outputs_2 = model_2(**inputs)
        outputs_3 = model_3(**inputs)
        outputs_4 = model_4(**inputs)
        outputs_5 = model_5(**inputs)
        outputs_6 = model_6(**inputs)
        outputs_7 = model_7(**inputs)
        outputs_8 = model_8(**inputs)
        outputs_9 = model_9(**inputs)
        outputs_10 = model_10(**inputs)

    logit1 = outputs_1.logits[:, 0].tolist()  # 1번 클래스 이진분류기의, 1번 클래스에 대한 로짓값 (batch_size만큼 나옴)
    logit2 = outputs_2.logits[:, 1].tolist()  # 2번 클래스 이진분류기의, 2번 클래스에 대한 로짓값
    logit3 = outputs_3.logits[:, 2].tolist()  # 3번 클래스 이진분류기의, 3번 클래스에 대한 로짓값
    logit4 = outputs_4.logits[:, 3].tolist()  # 4번 클래스 이진분류기의, 4번 클래스에 대한 로짓값
    logit5 = outputs_5.logits[:, 4].tolist()  # 5번 클래스 이진분류기의, 5번 클래스에 대한 로짓값
    logit6 = outputs_6.logits[:, 5].tolist()  # 6번 클래스 이진분류기의, 6번 클래스에 대한 로짓값
    logit7 = outputs_7.logits[:, 6].tolist()  # 7번 클래스 이진분류기의, 7번 클래스에 대한 로짓값
    logit8 = outputs_8.logits[:, 7].tolist()  # 8번 클래스 이진분류기의, 8번 클래스에 대한 로짓값
    logit9 = outputs_9.logits[:, 8].tolist()  # 9번 클래스 이진분류기의, 9번 클래스에 대한 로짓값
    logit10 = outputs_10.logits[:, 9].tolist()  # 10번 클래스 이진분류기의, 10번 클래스에 대한 로짓값

    prediction_1 = (outputs_1.logits.argmax(dim=-1) + 1) == 1
    prediction_2 = (outputs_2.logits.argmax(dim=-1) + 1) == 2
    prediction_3 = (outputs_3.logits.argmax(dim=-1) + 1) == 3
    prediction_4 = (outputs_4.logits.argmax(dim=-1) + 1) == 4
    prediction_5 = (outputs_5.logits.argmax(dim=-1) + 1) == 5
    prediction_6 = (outputs_6.logits.argmax(dim=-1) + 1) == 6
    prediction_7 = (outputs_7.logits.argmax(dim=-1) + 1) == 7
    prediction_8 = (outputs_8.logits.argmax(dim=-1) + 1) == 8
    prediction_9 = (outputs_9.logits.argmax(dim=-1) + 1) == 9
    prediction_10 = (outputs_10.logits.argmax(dim=-1) + 1) == 10

    preds_rp[0].extend((outputs_1.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[1].extend((outputs_2.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[2].extend((outputs_3.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[3].extend((outputs_4.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[4].extend((outputs_5.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[5].extend((outputs_6.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[6].extend((outputs_7.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[7].extend((outputs_8.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[8].extend((outputs_9.logits.argmax(dim=-1) + 1).tolist())
    preds_rp[9].extend((outputs_10.logits.argmax(dim=-1) + 1).tolist())

    logit_matrix = np.array([logit1, logit2, logit3, logit4, logit5, logit6, logit7, logit8, logit9, logit10])
    prediction_matrix = np.array(
        [prediction_1.tolist(), prediction_2.tolist(), prediction_3.tolist(), prediction_4.tolist(),
         prediction_5.tolist(), prediction_6.tolist(), prediction_7.tolist(), prediction_8.tolist(),
         prediction_9.tolist(), prediction_10.tolist()])

    prediction = find_index_per_column(logit_matrix, prediction_matrix)

    preds.extend(prediction)
    true_labels.extend(labels.tolist())